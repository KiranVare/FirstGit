24) ) Indexing and join: Consider the relation
employee (emp_id,e_name,salary ,Date of Joining,Dapt_no,Designation)
Customer(c_id, c_name , email , city , pincode)Order(order_id , date , amount , cust_id.
 a. create empid as primary key and indices on table employee.

CREATE TABLE employee (
 emp_id INT PRIMARY KEY,
 e_name VARCHAR(50),
 salary DECIMAL(10, 2),
 Date_of_Joining DATE,
 Dept_no INT,
 Designation VARCHAR(50)
);

-- Create an index on the salary column
CREATE INDEX idx_salary ON employee(salary);


INSERT INTO employee (emp_id, e_name, salary, Date_of_Joining, Dept_no, Designation)
VALUES
 (1, 'Raj', 60000.00, '2022-01-15', 101, 'Manager'),
 (2, 'Pankaj', 55000.00, '2021-11-10', 102, 'Marketing'),
(3, 'Rohit', 45000.00, '2021-07-10', 102, 'Marketing'),
(4, 'Rahul', 44000.00, '2021-08-13', 102, 'Manager'),
(5, 'Dinesh', 41000.00, '2021-11-12', 102, 'Marketing');

-- Create the Customer table and insert 10 values
CREATE TABLE Customer (
 c_id INT PRIMARY KEY,
 c_name VARCHAR(50),
 email VARCHAR(100),
 city VARCHAR(50),
 pincode VARCHAR(10)
);

INSERT INTO Customer (c_id, c_name, email, city, pincode) VALUES
 (1, 'Mahesh', 'Mahesh@gmailcom', 'Pune', '10001'),
 (2, 'Ganesh', 'Ganesh@gmailcom', 'Mumbai', '90001'),
 (3, 'Suresh', 'Suresh@gmailcom', 'Nagpur', '40001'), 
(4, 'Ram', 'Ram@gmailcom', 'Kolhapur', '30001'),
 (5, 'Raju', 'Raju@gmailcom', 'Satara', '41501');

-- Create the Order table and insert 10 values


CREATE TABLE cust_order (
 order_id INT PRIMARY KEY,
 date DATE,
 amount DECIMAL(10, 2),
 cust_id INT
);



INSERT INTO cust_order (order_id, date, amount, cust_id)
VALUES
 (1, '2022-01-01', 100.00, 1),
 (2, '2022-01-04', 150.00, 2),
 (3, '2022-01-06', 350.00, 1),
 (4, '2022-01-08', 450.00, 3),
 (5, '2022-01-09', 250.00, 5);



b. Create a user-defined index on any column, for example, we'll create an index on the "email" 
column in the "Customer" table:

CREATE INDEX idx_email ON Customer(email);

c. Create a sequence using auto-increment:


ALTER TABLE Customer
MODIFY c_id INT AUTO_INCREMENT;


d. Truncate a table. You can use the `TRUNCATE` statement to remove all rows from a table 
without deleting the table itself. For example:

TRUNCATE TABLE employee;

e. Find a list of customers who placed orders and details of their orders:

SELECT c.c_name, o.order_id, o.date, o.amount
FROM customer c
INNER JOIN cust_order o ON c.c_id = o.cust_id;

f. Find info of customers and append order details to the table:


CREATE TABLE customer_order_info AS
SELECT c.c_name, c.email, c.city, c.pincode, o.order_id, o.date, o.amount
FROM customer c
LEFT JOIN cust_order o ON c.c_id = o.cust_id;

g. List down customers who haven't placed orders:

SELECT c.c_name, c.email
FROM customer c
LEFT JOIN cust_order o ON c.c_id = o.cust_id
WHERE o.cust_id IS NULL;









